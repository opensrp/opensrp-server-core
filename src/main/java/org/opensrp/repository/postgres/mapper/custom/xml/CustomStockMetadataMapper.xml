<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
        namespace="org.opensrp.repository.postgres.mapper.custom.CustomStockMetadataMapper">
    <resultMap id="StockAndProductDetails" type="org.opensrp.domain.postgres.PgStockAndProductDetails">
        <association property="stock" javaType="org.opensrp.domain.postgres.Stock" column="id"
                     resultMap="org.opensrp.repository.postgres.mapper.StockMapper.BaseResultMap">
        </association>
        <association property="productCatalogue" javaType="org.opensrp.domain.postgres.ProductCatalogue"
                     column="unique_id"
                     resultMap="org.opensrp.repository.postgres.mapper.ProductCatalogueMapper.CustomResultMap">
        </association>
    </resultMap>


    <sql id="Base_Column_List">
        s.id, s.json
    </sql>

    <sql id="Stock_And_Product_Details_Column_List">
        stock.id, stock.json , stock.date_deleted, productCatalogue.unique_id, productCatalogue.product_name,
        productCatalogue.json AS product_catalogue_json, productCatalogue.server_version
    </sql>

    <sql id="Base_Table_List">
        from core.stock_metadata sm
        join core.stock s on sm.stock_id
        = s.id
    </sql>

    <sql id="selectManyBySearchBeanConditions">
        <trim prefixOverrides="and">
            sm.date_deleted is null
            and (s.json->> 'accountabilityEndDate' is null or s.json->>'accountabilityEndDate' >=
            #{todayDate,jdbcType=DATE} )

            <if test="searchBean.providerId != null">
                and sm.provider_id = #{searchBean.providerId,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.serverVersion != null">
                and sm.server_version >= #{searchBean.serverVersion,jdbcType=BIGINT}
            </if>
            <if test="searchBean.identifier != null">
                and s.json->>'identifier' = #{searchBean.identifier,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.stockTypeId != null">
                and s.json->>'vaccine_type_id' =
                #{searchBean.stockTypeId,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.transactionType != null">
                and s.json->>'transaction_type' =
                #{searchBean.transactionType,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.value != null">
                and s.json->>'value' = #{searchBean.value,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.dateCreated != null">
                and s.json->>'date_created' = #{searchBean.dateCreated,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.toFrom != null">
                and s.json->>'to_from' = #{searchBean.toFrom,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.dateUpdated != null">
                and s.json->>'date_updated' = #{searchBean.dateUpdated,jdbcType=VARCHAR}
            </if>
            <if test="searchBean.locations != null and searchBean.locations.size() > 0">
                and sm.location_id IN
                <foreach item="item" index="index" collection="searchBean.locations" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
    </sql>

    <select id="selectByDocumentId" parameterType="java.lang.String"
            resultMap="org.opensrp.repository.postgres.mapper.StockMapper.BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        <include refid="Base_Table_List"/>
        where sm.document_id = #{documentId,jdbcType=VARCHAR}
    </select>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria"
                     separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and sm.${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and sm.${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and sm.${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and sm.${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem"
                                             open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <select id="selectMany"
            resultMap="org.opensrp.repository.postgres.mapper.StockMapper.BaseResultMap">
        select
        <if test="example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        <include refid="Base_Table_List"/>
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by sm.${example.orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectByIdentifier"
            resultMap="org.opensrp.repository.postgres.mapper.StockMapper.BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        <include refid="Base_Table_List"/>
        WHERE json->>'vaccine_type_id' = #{stockTypeId,jdbcType=VARCHAR}
        LIMIT
        #{limit} OFFSET #{offset}
    </select>

    <select id="selectManyBySearchBean"
            resultMap="org.opensrp.repository.postgres.mapper.StockMapper.BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        <include refid="Base_Table_List"/>
        <where>
            <include refid="selectManyBySearchBeanConditions"/>
        </where>
        <if test="orderByClause != null">
            order by sm.${orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectByStockId" parameterType="java.lang.Long"
            resultMap="org.opensrp.repository.postgres.mapper.StockMetadataMapper.BaseResultMap">
        SELECT * FROM core.stock_metadata
        where stock_id = #{stockId,jdbcType=BIGINT}
    </select>

    <select id="selectManyStockAndProductDetailsByServicePointId" resultMap="StockAndProductDetails">
        select
        <include refid="Stock_And_Product_Details_Column_List"/>
        from core.stock stock join core.product_catalogue productCatalogue
        on
        CAST(NULLIF( stock.json->> 'identifier', '') as numeric) = productCatalogue.unique_id
        <where>
            <trim prefixOverrides="and">

                <if test="locations != null and locations.size() > 0">
                    and stock.json ->> 'locationId' IN
                    <foreach item="item" index="index" collection="locations" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
            </trim>
        </where>
    </select>

    <select id="selectStockAndProductDetailsByStockId" resultMap="StockAndProductDetails">
        select
        <include refid="Stock_And_Product_Details_Column_List"/>
        from core.stock_metadata sm
        join core.stock stock on sm.stock_id = stock.id
        join core.product_catalogue productCatalogue
        on
        CAST(NULLIF( stock.json->> 'identifier', '') as numeric) = productCatalogue.unique_id
        <where>
            <trim prefixOverrides="and">
                <if test="documentId != null">
                    sm.document_id = #{documentId,jdbcType=VARCHAR}
                </if>
            </trim>
        </where>
    </select>

    <select id="selectManyStockAndProductDetailsBySearchBean" resultMap="StockAndProductDetails">
        select
        s.id, s.json , s.date_deleted, productCatalogue.unique_id, productCatalogue.product_name, productCatalogue.json
        AS product_catalogue_json, productCatalogue.server_version
        from core.stock_metadata sm
        join core.stock s on sm.stock_id = s.id
        join core.product_catalogue productCatalogue
        on
        (s.json->> 'identifier')::bigint = productCatalogue.unique_id
        <where>
            <include refid="selectManyBySearchBeanConditions"/>
        </where>
        <if test="orderByClause != null">
            order by sm.${orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

</mapper>
