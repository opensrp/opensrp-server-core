<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
        namespace="org.opensrp.repository.postgres.mapper.custom.CustomProductCatalogueMapper">

    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Aug 31 16:21:54 PKT 2020.
        -->
        p.unique_id, p.product_name, p.json, p.server_version
    </sql>

    <sql id="Base_Table_List">
        from core.product_catalogue p
    </sql>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.jsonCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition}
                                    #{criterion.value,typeHandler=org.opensrp.repository.postgres.handler.ProductCatalogueTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition}
                                    #{criterion.value,typeHandler=org.opensrp.repository.postgres.handler.ProductCatalogueTypeHandler}
                                    and
                                    #{criterion.secondValue,typeHandler=org.opensrp.repository.postgres.handler.ProductCatalogueTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem,typeHandler=org.opensrp.repository.postgres.handler.ProductCatalogueTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <select id="selectMany"
            resultMap="org.opensrp.repository.postgres.mapper.ProductCatalogueMapper.BaseResultMap">
        select
        <include
                refid="org.opensrp.repository.postgres.mapper.ProductCatalogueMapper.Base_Column_List"/>
        from core.product_catalogue p
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by p.${example.orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <insert id="insertSelectiveAndSetId" parameterType="org.opensrp.domain.postgres.ProductCatalogue"
            useGeneratedKeys="true" keyProperty="uniqueId" keyColumn="unique_id">
        insert into core.product_catalogue
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uniqueId != null">
                unique_id,
            </if>
            <if test="productName != null">
                product_name,
            </if>
            <if test="json != null">
                json,
            </if>
            server_version
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uniqueId != null">
                #{uniqueId,jdbcType=BIGINT},
            </if>
            <if test="productName != null">
                #{productName,jdbcType=VARCHAR},
            </if>
            <if test="json != null">
                #{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.ProductCatalogueTypeHandler},
            </if>
            nextVal('core.product_catalogue_server_version_seq')
        </trim>
    </insert>

    <select id="selectOne"
            resultMap="org.opensrp.repository.postgres.mapper.ProductCatalogueMapper.BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        <include refid="Base_Table_List"/>
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByPrimaryKeyAndGenerateServerVersion"
            parameterType="org.opensrp.domain.postgres.ProductCatalogue">
        update core.product_catalogue
        set product_name = #{productName,jdbcType=VARCHAR},
        json = #{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.ProductCatalogueTypeHandler},
        server_version = nextVal('core.product_catalogue_server_version_seq')
        where unique_id = #{uniqueId,jdbcType=BIGINT}
    </update>
    <select id="selectServerVersionByPrimaryKey"
            parameterType="java.lang.Long" resultType="long">
        select server_version from core.product_catalogue where unique_id = #{uniqueId,jdbcType=BIGINT}
    </select>

</mapper>
