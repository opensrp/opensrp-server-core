<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
        namespace="org.opensrp.repository.postgres.mapper.custom.CustomPlanMapper">

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria"
                     separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value}
                                    and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value"
                                             item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <select id="selectMany"
            resultMap="org.opensrp.repository.postgres.mapper.PlanMapper.BaseResultMap">
        select
        <include
                refid="org.opensrp.repository.postgres.mapper.PlanMapper.Base_Column_List"/>
        from core.plan p
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by p.${example.orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countMany"
            resultType="long">
        select
        count(p.id)
        from core.plan p
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <insert id="insertSelectiveAndSetId" parameterType="org.opensrp.domain.postgres.Plan"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into core.plan
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="identifier != null">
                identifier,
            </if>
            <if test="json != null">
                json,
            </if>
            <if test="dateDeleted != null">
                date_deleted,
            </if>
            server_version,
            <if test="experimental != null">
                experimental,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="identifier != null">
                #{identifier,jdbcType=VARCHAR},
            </if>
            <if test="json != null">
                #{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.PlanTypeHandler},
            </if>
            <if test="dateDeleted != null">
                #{dateDeleted,jdbcType=TIMESTAMP},
            </if>
            nextVal('core.plan_server_version_seq'),
            <if test="experimental != null">
                #{experimental,jdbcType=BIT},
            </if>
        </trim>
    </insert>

    <select id="selectManyReturnOptionalFields"
            resultMap="org.opensrp.repository.postgres.mapper.PlanMapper.BaseResultMap">
        select
        <if test="!fields">
            <include
                    refid="org.opensrp.repository.postgres.mapper.PlanMapper.Base_Column_List"/>
        </if>
        <if test="fields">
            p.id,
            jsonb_build_object(
            'identifier', json->'identifier',
            <trim>
                <foreach item="field" collection="fields" separator=",">
                    #{field}, json->#{field}
                </foreach>
            </trim>
            ) as json
        </if>
        from core.plan p
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by p.${example.orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectManyIds" resultType="java.lang.String">
        select
        <if test="example.distinct">
            distinct
        </if>
        identifier
        from core.plan p
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by p.${example.orderByClause}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectPlansBySearchBean" resultMap="org.opensrp.repository.postgres.mapper.PlanMapper.BaseResultMap">
        select
        <include
                refid="org.opensrp.repository.postgres.mapper.PlanMapper.Base_Column_List"/>
        from core.plan p
        <if test="searchBean.useContexts != null">
            ,
            LATERAL (SELECT jsonb_array_elements(p.json -> 'useContext') useContext) useContexts
        </if>
        <where>
            <trim prefixOverrides="and">
                <if test="searchBean.planStatus != null">
                    and json->>'status' = #{searchBean.planStatus,jdbcType=VARCHAR}
                </if>
                <if test="searchBean.isExperimental != null">
                    p.experimental = #{searchBean.isExperimental,jdbcType=BIT}
                </if>
                <if test="searchBean.useContexts != null">
                    <trim prefix="and ">
                        <foreach collection="searchBean.useContexts" index="key" item="value" separator=" and ">
                            useContexts.useContext ->> 'code' = #{key,jdbcType=VARCHAR}
                            and
                            useContexts.useContext ->> 'valueCodableConcept' = #{value,jdbcType=VARCHAR}
                        </foreach>
                    </trim>
                </if>
            </trim>
        </where>
        <if test="searchBean.orderByFieldName!=null and searchBean.orderByType!=null">
            order by ${searchBean.orderByFieldName} ${searchBean.orderByType}
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <update id="updateByPrimaryKeyAndGenerateServerVersion" parameterType="org.opensrp.domain.postgres.Plan">
        update core.plan
        set identifier = #{identifier,jdbcType=VARCHAR},
        json = #{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.PlanTypeHandler},
        date_deleted = #{dateDeleted,jdbcType=TIMESTAMP},
        server_version = nextVal('core.plan_server_version_seq'),
        experimental = #{experimental,jdbcType=BIT},
        date_created = #{dateCreated,jdbcType=TIMESTAMP},
        date_edited = #{dateEdited,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectServerVersionByPrimaryKey"
            parameterType="java.lang.Long" resultType="long">
        select server_version from core.plan where id = #{id,jdbcType=BIGINT}
    </select>

</mapper>
